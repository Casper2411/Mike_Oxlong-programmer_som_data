[ ]{0: LDARGS}                          //Add's the argument to the stack
[ 4 ]{1: CALL 1 5}                      //Calls a function located at line 5, and takes one element from the stack(here it is the value 4), and adds the return adress(4) and the bp to the stack
[ 4 -999 4 ]{5: INCSP 1}                //Stack pointer is increased by 1, to make space for more
[ 4 -999 4 0 ]{7: GETBP}                //Adding base point to the stack
[ 4 -999 4 0 2 ]{8: CSTI 1}             //Add a value 1 to the stack.
[ 4 -999 4 0 2 1 ]{10: ADD}             //Increase 2 with the one on the stack
[ 4 -999 4 0 3 ]{11: CSTI 0}            //Add a value 0 to the stack.
[ 4 -999 4 0 3 0 ]{13: STI}             //Stores the top value of the stack (0) at the address or position indicated by the next value (3), effectively placing 0 in that slot.
[ 4 -999 4 0 0 ]{14: INCSP -1}          //Remove the top element of the stack, by decreasing the stack pointer
[ 4 -999 4 0 ]{16: GOTO 43}             //Jumps to line 43.
[ 4 -999 4 0 ]{43: GETBP}               //Gets the bp again.
[ 4 -999 4 0 2 ]{44: CSTI 1}            //Adds one to stack
[ 4 -999 4 0 2 1 ]{46: ADD}             //Add's the one with the two on the stack
[ 4 -999 4 0 3 ]{47: LDI}               //Here it loads indirect from the third place on the stack. (here the third index is 0)
[ 4 -999 4 0 0 ]{48: GETBP}             //Again gets the Base pointer.
[ 4 -999 4 0 0 2 ]{49: CSTI 0}          //Add's 0 to the stack.
[ 4 -999 4 0 0 2 0 ]{51: ADD}           //Add's the 0 to the 2 on the stack
[ 4 -999 4 0 0 2 ]{52: LDI}             //Here it loads inccorrect, the location on the stack from the top of the stack(2), and the location of 2, is the value 4.
[ 4 -999 4 0 0 4 ]{53: LT}              //Now it compares 0 to 4 , and says 1 if true, and 0 if false.
[ 4 -999 4 0 1 ]{54: IFNZRO 18}         //Now it checks the prior statement's return, and see's if it is 0 or 1. Here it is not become false, so it jumps to line 18.
[ 4 -999 4 0 ]{18: GETBP}               //Here it gets the bp again.
[ 4 -999 4 0 2 ]{19: CSTI 1}            //Adds a one to the stack
[ 4 -999 4 0 2 1 ]{21: ADD}             //Adds the top two values
[ 4 -999 4 0 3 ]{22: LDI}               //Then loads indirect the 3 place on the stack, which is 0
[ 4 -999 4 0 0 ]{23: PRINTI}            //Here it prints the value found by the load indirect.
0 [ 4 -999 4 0 0 ]{24: INCSP -1}        //now it decreases the stack by 1
[ 4 -999 4 0 ]{26: GETBP}               //Gets the bp again
[ 4 -999 4 0 2 ]{27: CSTI 1}            // Adds a one to the stack
[ 4 -999 4 0 2 1 ]{29: ADD}             //Adds the one and 2 to the stack.
[ 4 -999 4 0 3 ]{30: GETBP}             //Gets the bp again.
[ 4 -999 4 0 3 2 ]{31: CSTI 1}          //Adds a one to the stack
[ 4 -999 4 0 3 2 1 ]{33: ADD}           //Adds the values 1 and 2
[ 4 -999 4 0 3 3 ]{34: LDI}             //Now it loads indirect for the location 3 on the stack, which is the value 0
[ 4 -999 4 0 3 0 ]{35: CSTI 1}          //Adds a one to the stack.
[ 4 -999 4 0 3 0 1 ]{37: ADD}           //Add's the one to the stack
[ 4 -999 4 0 3 1 ]{38: STI}             //Here it stores indirect the value 1 on the 3'rd place on the stack.
[ 4 -999 4 1 1 ]{39: INCSP -1}          //And then decreases the stack by one.
[ 4 -999 4 1 ]{41: INCSP 0}             //Does nothing
[ 4 -999 4 1 ]{43: GETBP}               //Here it hits line 43, that is explained in line 11 of this document, and does the same instructions, as described before, so this has been chosen to not explain, by permission from TA.
[ 4 -999 4 1 2 ]{44: CSTI 1}
[ 4 -999 4 1 2 1 ]{46: ADD}
[ 4 -999 4 1 3 ]{47: LDI}
[ 4 -999 4 1 1 ]{48: GETBP}
[ 4 -999 4 1 1 2 ]{49: CSTI 0}
[ 4 -999 4 1 1 2 0 ]{51: ADD}
[ 4 -999 4 1 1 2 ]{52: LDI}
[ 4 -999 4 1 1 4 ]{53: LT}
[ 4 -999 4 1 1 ]{54: IFNZRO 18}        //the statement from before is still true, therefore it loops back to line 18, and does the instructions from line 21 of this file.
[ 4 -999 4 1 ]{18: GETBP}
[ 4 -999 4 1 2 ]{19: CSTI 1}
[ 4 -999 4 1 2 1 ]{21: ADD}
[ 4 -999 4 1 3 ]{22: LDI}
[ 4 -999 4 1 1 ]{23: PRINTI}
1 [ 4 -999 4 1 1 ]{24: INCSP -1}
[ 4 -999 4 1 ]{26: GETBP}
[ 4 -999 4 1 2 ]{27: CSTI 1}
[ 4 -999 4 1 2 1 ]{29: ADD}
[ 4 -999 4 1 3 ]{30: GETBP}
[ 4 -999 4 1 3 2 ]{31: CSTI 1}
[ 4 -999 4 1 3 2 1 ]{33: ADD}
[ 4 -999 4 1 3 3 ]{34: LDI}
[ 4 -999 4 1 3 1 ]{35: CSTI 1}
[ 4 -999 4 1 3 1 1 ]{37: ADD}
[ 4 -999 4 1 3 2 ]{38: STI}
[ 4 -999 4 2 2 ]{39: INCSP -1}
[ 4 -999 4 2 ]{41: INCSP 0}
[ 4 -999 4 2 ]{43: GETBP}
[ 4 -999 4 2 2 ]{44: CSTI 1}
[ 4 -999 4 2 2 1 ]{46: ADD}
[ 4 -999 4 2 3 ]{47: LDI}
[ 4 -999 4 2 2 ]{48: GETBP}
[ 4 -999 4 2 2 2 ]{49: CSTI 0}
[ 4 -999 4 2 2 2 0 ]{51: ADD}
[ 4 -999 4 2 2 2 ]{52: LDI}
[ 4 -999 4 2 2 4 ]{53: LT}
[ 4 -999 4 2 1 ]{54: IFNZRO 18}         //the statement from before is still true, therefore it loops back to line 18, and does the instructions from line 21 of this file.
[ 4 -999 4 2 ]{18: GETBP}
[ 4 -999 4 2 2 ]{19: CSTI 1}
[ 4 -999 4 2 2 1 ]{21: ADD}
[ 4 -999 4 2 3 ]{22: LDI}
[ 4 -999 4 2 2 ]{23: PRINTI}
2 [ 4 -999 4 2 2 ]{24: INCSP -1}
[ 4 -999 4 2 ]{26: GETBP}
[ 4 -999 4 2 2 ]{27: CSTI 1}
[ 4 -999 4 2 2 1 ]{29: ADD}
[ 4 -999 4 2 3 ]{30: GETBP}
[ 4 -999 4 2 3 2 ]{31: CSTI 1}
[ 4 -999 4 2 3 2 1 ]{33: ADD}
[ 4 -999 4 2 3 3 ]{34: LDI}
[ 4 -999 4 2 3 2 ]{35: CSTI 1}
[ 4 -999 4 2 3 2 1 ]{37: ADD}
[ 4 -999 4 2 3 3 ]{38: STI}
[ 4 -999 4 3 3 ]{39: INCSP -1}
[ 4 -999 4 3 ]{41: INCSP 0}
[ 4 -999 4 3 ]{43: GETBP}
[ 4 -999 4 3 2 ]{44: CSTI 1}
[ 4 -999 4 3 2 1 ]{46: ADD}
[ 4 -999 4 3 3 ]{47: LDI}
[ 4 -999 4 3 3 ]{48: GETBP}
[ 4 -999 4 3 3 2 ]{49: CSTI 0}
[ 4 -999 4 3 3 2 0 ]{51: ADD}
[ 4 -999 4 3 3 2 ]{52: LDI}
[ 4 -999 4 3 3 4 ]{53: LT}
[ 4 -999 4 3 1 ]{54: IFNZRO 18}             //the statement from before is still true, therefore it loops back to line 18, and does the instructions from line 21 of this file.
[ 4 -999 4 3 ]{18: GETBP}
[ 4 -999 4 3 2 ]{19: CSTI 1}
[ 4 -999 4 3 2 1 ]{21: ADD}
[ 4 -999 4 3 3 ]{22: LDI}
[ 4 -999 4 3 3 ]{23: PRINTI}
3 [ 4 -999 4 3 3 ]{24: INCSP -1}
[ 4 -999 4 3 ]{26: GETBP}
[ 4 -999 4 3 2 ]{27: CSTI 1}
[ 4 -999 4 3 2 1 ]{29: ADD}
[ 4 -999 4 3 3 ]{30: GETBP}
[ 4 -999 4 3 3 2 ]{31: CSTI 1}
[ 4 -999 4 3 3 2 1 ]{33: ADD}
[ 4 -999 4 3 3 3 ]{34: LDI}
[ 4 -999 4 3 3 3 ]{35: CSTI 1}
[ 4 -999 4 3 3 3 1 ]{37: ADD}
[ 4 -999 4 3 3 4 ]{38: STI}
[ 4 -999 4 4 4 ]{39: INCSP -1}
[ 4 -999 4 4 ]{41: INCSP 0}
[ 4 -999 4 4 ]{43: GETBP}
[ 4 -999 4 4 2 ]{44: CSTI 1}
[ 4 -999 4 4 2 1 ]{46: ADD}
[ 4 -999 4 4 3 ]{47: LDI}
[ 4 -999 4 4 4 ]{48: GETBP}
[ 4 -999 4 4 4 2 ]{49: CSTI 0}
[ 4 -999 4 4 4 2 0 ]{51: ADD}
[ 4 -999 4 4 4 2 ]{52: LDI}
[ 4 -999 4 4 4 4 ]{53: LT}          // 4 is not less than 4, so it yields 0
[ 4 -999 4 4 0 ]{54: IFNZRO 18}     //  NOW the statement from before is false, so the jump does not happen,, and the code continues
[ 4 -999 4 4 ]{56: INCSP -1}        // Here it decreases the stack pointer with 1.
[ 4 -999 4 ]{58: RET 0}             // Here it returns with 0 arguments, and jumps to line 4, as specified in line 2 of this file, and also removed the -999
[ 4 ]{4: STOP}                      //Stop's the execution of the program.
